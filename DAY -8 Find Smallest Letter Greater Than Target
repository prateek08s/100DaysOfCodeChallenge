/* You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

 

Example 1:

Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.
Example 2:

Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.
Example 3:

Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].

*/


import java.util.*;
public class DAY8
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of elements in the array: ");
        int n = sc.nextInt();
        System.out.println("Enter the elements of the array: ");
        char[] letters = new char[n];
        for(int i=0; i<n; i++)
        {
            letters[i] = sc.next().charAt(0);
        }
        System.out.println("Enter the target character: ");
        char target = sc.next().charAt(0);  
        char result = nextGreatestLetter(letters, target);
        System.out.println("The next greatest letter is: "+result);
        
    }

    public static char nextGreatestLetter(char[] letters, char target) 
    {
        int start = 0;
        int end = letters.length-1;
        while(start<=end)
        {
            int mid = start + (end-start)/2;
            if(target < letters[mid])
            {
               end = mid-1;
            }
            else 
            {
                start = mid+1;         }    
    }
    return letters[start%letters.length];
    }
}
